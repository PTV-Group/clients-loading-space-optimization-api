/* tslint:disable */
/* eslint-disable */
/**
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BinPackingFocus,
    BinPackingFocusFromJSON,
    BinPackingFocusToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PackBinsRequest,
    PackBinsRequestFromJSON,
    PackBinsRequestToJSON,
    PackBinsResponse,
    PackBinsResponseFromJSON,
    PackBinsResponseToJSON,
    PackedBinsIdentifier,
    PackedBinsIdentifierFromJSON,
    PackedBinsIdentifierToJSON,
    StatusResponse,
    StatusResponseFromJSON,
    StatusResponseToJSON,
} from '../models';

export interface CancelBinPackingRequest {
    id: string;
}

export interface GetPackedBinsRequest {
    id: string;
}

export interface GetStatusRequest {
    id: string;
}

export interface PackBinsOperationRequest {
    packBinsRequest: PackBinsRequest;
    focus?: BinPackingFocus;
}

export interface StartBinPackingRequest {
    packBinsRequest: PackBinsRequest;
    focus?: BinPackingFocus;
}

/**
 * 
 */
export class BinsApi extends runtime.BaseAPI {

    /**
     * Cancels a bin packing operation specified by its ID.
     */
    async cancelBinPackingRaw(requestParameters: CancelBinPackingRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancelBinPacking.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bins/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancels a bin packing operation specified by its ID.
     */
    async cancelBinPacking(requestParameters: CancelBinPackingRequest): Promise<void> {
        await this.cancelBinPackingRaw(requestParameters);
    }

    /**
     * Gets the results of a bin packing operation specified by its ID.
     */
    async getPackedBinsRaw(requestParameters: GetPackedBinsRequest): Promise<runtime.ApiResponse<PackBinsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPackedBins.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bins/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PackBinsResponseFromJSON(jsonValue));
    }

    /**
     * Gets the results of a bin packing operation specified by its ID.
     */
    async getPackedBins(requestParameters: GetPackedBinsRequest): Promise<PackBinsResponse> {
        const response = await this.getPackedBinsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the status of a bin packing operation.
     */
    async getStatusRaw(requestParameters: GetStatusRequest): Promise<runtime.ApiResponse<StatusResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bins/status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusResponseFromJSON(jsonValue));
    }

    /**
     * Returns the status of a bin packing operation.
     */
    async getStatus(requestParameters: GetStatusRequest): Promise<StatusResponse> {
        const response = await this.getStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Performs a bin packing operation as described by the request and directly returns the packing result in the response. Therefore the request is restricted as described at the request body to limit the calculation time to a maximum of 10 seconds. In case the operation lasts longer, it will be aborted. The state up to then will be returned. So the result may differ to the asynchronous call.
     */
    async packBinsRaw(requestParameters: PackBinsOperationRequest): Promise<runtime.ApiResponse<PackBinsResponse>> {
        if (requestParameters.packBinsRequest === null || requestParameters.packBinsRequest === undefined) {
            throw new runtime.RequiredError('packBinsRequest','Required parameter requestParameters.packBinsRequest was null or undefined when calling packBins.');
        }

        const queryParameters: any = {};

        if (requestParameters.focus !== undefined) {
            queryParameters['focus'] = requestParameters.focus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PackBinsRequestToJSON(requestParameters.packBinsRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PackBinsResponseFromJSON(jsonValue));
    }

    /**
     * Performs a bin packing operation as described by the request and directly returns the packing result in the response. Therefore the request is restricted as described at the request body to limit the calculation time to a maximum of 10 seconds. In case the operation lasts longer, it will be aborted. The state up to then will be returned. So the result may differ to the asynchronous call.
     */
    async packBins(requestParameters: PackBinsOperationRequest): Promise<PackBinsResponse> {
        const response = await this.packBinsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Starts a bin packing operation as described by the request. The result informs if operation is accepted and in this case returns an operation ID. Further information and result should be requested by getStatus() and getPackedBins() via ID.
     */
    async startBinPackingRaw(requestParameters: StartBinPackingRequest): Promise<runtime.ApiResponse<PackedBinsIdentifier>> {
        if (requestParameters.packBinsRequest === null || requestParameters.packBinsRequest === undefined) {
            throw new runtime.RequiredError('packBinsRequest','Required parameter requestParameters.packBinsRequest was null or undefined when calling startBinPacking.');
        }

        const queryParameters: any = {};

        if (requestParameters.focus !== undefined) {
            queryParameters['focus'] = requestParameters.focus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bins/async`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PackBinsRequestToJSON(requestParameters.packBinsRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PackedBinsIdentifierFromJSON(jsonValue));
    }

    /**
     * Starts a bin packing operation as described by the request. The result informs if operation is accepted and in this case returns an operation ID. Further information and result should be requested by getStatus() and getPackedBins() via ID.
     */
    async startBinPacking(requestParameters: StartBinPackingRequest): Promise<PackedBinsIdentifier> {
        const response = await this.startBinPackingRaw(requestParameters);
        return await response.value();
    }

}
