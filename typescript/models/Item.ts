/* tslint:disable */
/* eslint-disable */
/**
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AllowedOrientation,
    AllowedOrientationFromJSON,
    AllowedOrientationFromJSONTyped,
    AllowedOrientationToJSON,
    BoxDimensions,
    BoxDimensionsFromJSON,
    BoxDimensionsFromJSONTyped,
    BoxDimensionsToJSON,
    ItemSurfaceLoads,
    ItemSurfaceLoadsFromJSON,
    ItemSurfaceLoadsFromJSONTyped,
    ItemSurfaceLoadsToJSON,
} from './';

/**
 * Describes a cuboid item which is to be packed into a bin.
 * If there are many identical items that do not have to be differentiated by individual Item.id you should use the Item.numberOfInstances field.
 * This provides better performance and packing than specifying each item on its own when this is not needed.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * User provided ID for this item. Must be unique.
     * @type {string}
     * @memberof Item
     */
    id: string;
    /**
     * 
     * @type {BoxDimensions}
     * @memberof Item
     */
    dimensions: BoxDimensions;
    /**
     * Weight of this item in [g].
     * @type {number}
     * @memberof Item
     */
    weight: number;
    /**
     * 
     * @type {ItemSurfaceLoads}
     * @memberof Item
     */
    maximumSurfaceLoads?: ItemSurfaceLoads;
    /**
     * Enumerates possible orientations. If not given all orientations will be allowed.
     * * `ORIGINAL` - Item is not re-oriented. Dimensions stay (x,y,z).
     * * `X` - Item is rotated around x-axis (widthwise) by +/-90 degrees compared to the original orientation. Dimensions are (x,z,y).
     * * `Y` - Item is rotated around y-axis (heightwise) by +/-90 degrees compared to the original orientation. Dimensions are (z,y,x).
     * * `Z` - Item is rotated around z-axis (lengthwise) by +/-90 degrees compared to the original orientation. Dimensions are (y,x,z).
     * * `XZ` - Item is rotated around x- then z-axis (width- then heightwise) by +/-90 degrees compared to the original orientation. Dimensions are (z,x,y).
     * * `YZ` - Item is rotated around x- then z-axis (width- then heightwise) by +/-90 degrees compared to the original orientation. Dimensions are (z,x,y).
     * @type {Array<AllowedOrientation>}
     * @memberof Item
     */
    allowedOrientations?: Array<AllowedOrientation>;
    /**
     * Number of instances of this item that should be packed.
     * @type {number}
     * @memberof Item
     */
    numberOfInstances?: number;
}

export function ItemFromJSON(json: any): Item {
    return ItemFromJSONTyped(json, false);
}

export function ItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): Item {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'dimensions': BoxDimensionsFromJSON(json['dimensions']),
        'weight': json['weight'],
        'maximumSurfaceLoads': !exists(json, 'maximumSurfaceLoads') ? undefined : ItemSurfaceLoadsFromJSON(json['maximumSurfaceLoads']),
        'allowedOrientations': !exists(json, 'allowedOrientations') ? undefined : ((json['allowedOrientations'] as Array<any>).map(AllowedOrientationFromJSON)),
        'numberOfInstances': !exists(json, 'numberOfInstances') ? undefined : json['numberOfInstances'],
    };
}

export function ItemToJSON(value?: Item | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'dimensions': BoxDimensionsToJSON(value.dimensions),
        'weight': value.weight,
        'maximumSurfaceLoads': ItemSurfaceLoadsToJSON(value.maximumSurfaceLoads),
        'allowedOrientations': value.allowedOrientations === undefined ? undefined : ((value.allowedOrientations as Array<any>).map(AllowedOrientationToJSON)),
        'numberOfInstances': value.numberOfInstances,
    };
}


