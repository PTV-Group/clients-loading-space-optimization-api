/* tslint:disable */
/* eslint-disable */
/**
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BoxDimensions,
    BoxDimensionsFromJSON,
    BoxDimensionsFromJSONTyped,
    BoxDimensionsToJSON,
} from './';

/**
 * 
 * @export
 * @interface Bin
 */
export interface Bin {
    /**
     * User provided ID for this bin. Must be unique.
     * @type {string}
     * @memberof Bin
     */
    id: string;
    /**
     * Number of instances of this bin available for packing.
     * @type {number}
     * @memberof Bin
     */
    numberOfInstances?: number;
    /**
     * 
     * @type {BoxDimensions}
     * @memberof Bin
     */
    dimensions: BoxDimensions;
    /**
     * Maximum accumulated volume of items that can be packed into a single bin irrespective of bin dimensions in [cmÂ³]. This value must never exceed the natural inner volume specified by dimensions. If not given, defaults to the natural inner volume specified by dimensions.
     * @type {number}
     * @memberof Bin
     */
    maximumVolumeCapacity?: number;
    /**
     * Maximum accumulated weight of items that can be packed into a single bin in [g]. If not given the weight capacity is assumed to be the maximum value.
     * @type {number}
     * @memberof Bin
     */
    maximumWeightCapacity?: number;
}

export function BinFromJSON(json: any): Bin {
    return BinFromJSONTyped(json, false);
}

export function BinFromJSONTyped(json: any, ignoreDiscriminator: boolean): Bin {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'numberOfInstances': !exists(json, 'numberOfInstances') ? undefined : json['numberOfInstances'],
        'dimensions': BoxDimensionsFromJSON(json['dimensions']),
        'maximumVolumeCapacity': !exists(json, 'maximumVolumeCapacity') ? undefined : json['maximumVolumeCapacity'],
        'maximumWeightCapacity': !exists(json, 'maximumWeightCapacity') ? undefined : json['maximumWeightCapacity'],
    };
}

export function BinToJSON(value?: Bin | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'numberOfInstances': value.numberOfInstances,
        'dimensions': BoxDimensionsToJSON(value.dimensions),
        'maximumVolumeCapacity': value.maximumVolumeCapacity,
        'maximumWeightCapacity': value.maximumWeightCapacity,
    };
}


