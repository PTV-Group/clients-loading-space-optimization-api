/* tslint:disable */
/* eslint-disable */
/**
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Describes the surface loads in [g/cm²] on an item acting on each of its axis.
 * If an axis is not provided it is assumed to be irrelevant and/or non-restrictive.
 * @export
 * @interface ItemSurfaceLoads
 */
export interface ItemSurfaceLoads {
    /**
     * Surface load acting on the x-axis (width) of the item in [g/cm²].
     * @type {number}
     * @memberof ItemSurfaceLoads
     */
    x?: number;
    /**
     * Surface load acting on the y-axis (height) of the item in [g/cm²].
     * @type {number}
     * @memberof ItemSurfaceLoads
     */
    y?: number;
    /**
     * Surface load acting on the z-axis (length) of the item in [g/cm²].
     * @type {number}
     * @memberof ItemSurfaceLoads
     */
    z?: number;
}

/**
 * Check if a given object implements the ItemSurfaceLoads interface.
 */
export function instanceOfItemSurfaceLoads(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemSurfaceLoadsFromJSON(json: any): ItemSurfaceLoads {
    return ItemSurfaceLoadsFromJSONTyped(json, false);
}

export function ItemSurfaceLoadsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemSurfaceLoads {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'x': !exists(json, 'x') ? undefined : json['x'],
        'y': !exists(json, 'y') ? undefined : json['y'],
        'z': !exists(json, 'z') ? undefined : json['z'],
    };
}

export function ItemSurfaceLoadsToJSON(value?: ItemSurfaceLoads | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'x': value.x,
        'y': value.y,
        'z': value.z,
    };
}

