/*
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.binpacking.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.binpacking.model.AllowedOrientation;
import com.ptvgroup.developer.client.binpacking.model.BoxDimensions;
import com.ptvgroup.developer.client.binpacking.model.ItemSurfaceLoads;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.ptvgroup.developer.client.binpacking.JSON;


/**
 * Describes a cuboid item which is to be packed into a bin. If there are many identical items that do not have to be differentiated by individual Item.id you should use the Item.numberOfInstances field. This provides better performance and packing than specifying each item on its own when this is not needed. 
 */
@ApiModel(description = "Describes a cuboid item which is to be packed into a bin. If there are many identical items that do not have to be differentiated by individual Item.id you should use the Item.numberOfInstances field. This provides better performance and packing than specifying each item on its own when this is not needed. ")
@JsonPropertyOrder({
  Item.JSON_PROPERTY_ID,
  Item.JSON_PROPERTY_DIMENSIONS,
  Item.JSON_PROPERTY_WEIGHT,
  Item.JSON_PROPERTY_MAXIMUM_SURFACE_LOADS,
  Item.JSON_PROPERTY_ALLOWED_ORIENTATIONS,
  Item.JSON_PROPERTY_NUMBER_OF_INSTANCES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-29T13:38:38.009016Z[Etc/UTC]")
public class Item {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_DIMENSIONS = "dimensions";
  private BoxDimensions dimensions;

  public static final String JSON_PROPERTY_WEIGHT = "weight";
  private Integer weight;

  public static final String JSON_PROPERTY_MAXIMUM_SURFACE_LOADS = "maximumSurfaceLoads";
  private ItemSurfaceLoads maximumSurfaceLoads;

  public static final String JSON_PROPERTY_ALLOWED_ORIENTATIONS = "allowedOrientations";
  private List<AllowedOrientation> allowedOrientations = null;

  public static final String JSON_PROPERTY_NUMBER_OF_INSTANCES = "numberOfInstances";
  private Integer numberOfInstances = 1;


  public Item id(String id) {
    this.id = id;
    return this;
  }

   /**
   * User provided ID for this item. Must be unique.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "User provided ID for this item. Must be unique.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Item dimensions(BoxDimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

   /**
   * Get dimensions
   * @return dimensions
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DIMENSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BoxDimensions getDimensions() {
    return dimensions;
  }


  public void setDimensions(BoxDimensions dimensions) {
    this.dimensions = dimensions;
  }


  public Item weight(Integer weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Weight of this item in [g].
   * minimum: 0
   * maximum: 80000000
   * @return weight
  **/
  @ApiModelProperty(required = true, value = "Weight of this item in [g].")
  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getWeight() {
    return weight;
  }


  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public Item maximumSurfaceLoads(ItemSurfaceLoads maximumSurfaceLoads) {
    this.maximumSurfaceLoads = maximumSurfaceLoads;
    return this;
  }

   /**
   * Get maximumSurfaceLoads
   * @return maximumSurfaceLoads
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MAXIMUM_SURFACE_LOADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ItemSurfaceLoads getMaximumSurfaceLoads() {
    return maximumSurfaceLoads;
  }


  public void setMaximumSurfaceLoads(ItemSurfaceLoads maximumSurfaceLoads) {
    this.maximumSurfaceLoads = maximumSurfaceLoads;
  }


  public Item allowedOrientations(List<AllowedOrientation> allowedOrientations) {
    this.allowedOrientations = allowedOrientations;
    return this;
  }

  public Item addAllowedOrientationsItem(AllowedOrientation allowedOrientationsItem) {
    if (this.allowedOrientations == null) {
      this.allowedOrientations = new ArrayList<>();
    }
    this.allowedOrientations.add(allowedOrientationsItem);
    return this;
  }

   /**
   * Enumerates possible orientations. If not given all orientations will be allowed. * &#x60;ORIGINAL&#x60; - Item is not re-oriented. Dimensions stay (x,y,z). * &#x60;X&#x60; - Item is rotated around x-axis (widthwise) by +/-90 degrees compared to the original orientation. Dimensions are (x,z,y). * &#x60;Y&#x60; - Item is rotated around y-axis (heightwise) by +/-90 degrees compared to the original orientation. Dimensions are (z,y,x). * &#x60;Z&#x60; - Item is rotated around z-axis (lengthwise) by +/-90 degrees compared to the original orientation. Dimensions are (y,x,z). * &#x60;XZ&#x60; - Item is rotated around x- then z-axis (width- then heightwise) by +/-90 degrees compared to the original orientation. Dimensions are (z,x,y). * &#x60;YZ&#x60; - Item is rotated around x- then z-axis (width- then heightwise) by +/-90 degrees compared to the original orientation. Dimensions are (z,x,y).
   * @return allowedOrientations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"ORIGINAL\",\"XZ\"]", value = "Enumerates possible orientations. If not given all orientations will be allowed. * `ORIGINAL` - Item is not re-oriented. Dimensions stay (x,y,z). * `X` - Item is rotated around x-axis (widthwise) by +/-90 degrees compared to the original orientation. Dimensions are (x,z,y). * `Y` - Item is rotated around y-axis (heightwise) by +/-90 degrees compared to the original orientation. Dimensions are (z,y,x). * `Z` - Item is rotated around z-axis (lengthwise) by +/-90 degrees compared to the original orientation. Dimensions are (y,x,z). * `XZ` - Item is rotated around x- then z-axis (width- then heightwise) by +/-90 degrees compared to the original orientation. Dimensions are (z,x,y). * `YZ` - Item is rotated around x- then z-axis (width- then heightwise) by +/-90 degrees compared to the original orientation. Dimensions are (z,x,y).")
  @JsonProperty(JSON_PROPERTY_ALLOWED_ORIENTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AllowedOrientation> getAllowedOrientations() {
    return allowedOrientations;
  }


  public void setAllowedOrientations(List<AllowedOrientation> allowedOrientations) {
    this.allowedOrientations = allowedOrientations;
  }


  public Item numberOfInstances(Integer numberOfInstances) {
    this.numberOfInstances = numberOfInstances;
    return this;
  }

   /**
   * Number of instances of this item that should be packed.
   * minimum: 1
   * maximum: 10000
   * @return numberOfInstances
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of instances of this item that should be packed.")
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_INSTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumberOfInstances() {
    return numberOfInstances;
  }


  public void setNumberOfInstances(Integer numberOfInstances) {
    this.numberOfInstances = numberOfInstances;
  }


  /**
   * Return true if this Item object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Item item = (Item) o;
    return Objects.equals(this.id, item.id) &&
        Objects.equals(this.dimensions, item.dimensions) &&
        Objects.equals(this.weight, item.weight) &&
        Objects.equals(this.maximumSurfaceLoads, item.maximumSurfaceLoads) &&
        Objects.equals(this.allowedOrientations, item.allowedOrientations) &&
        Objects.equals(this.numberOfInstances, item.numberOfInstances);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, dimensions, weight, maximumSurfaceLoads, allowedOrientations, numberOfInstances);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Item {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    maximumSurfaceLoads: ").append(toIndentedString(maximumSurfaceLoads)).append("\n");
    sb.append("    allowedOrientations: ").append(toIndentedString(allowedOrientations)).append("\n");
    sb.append("    numberOfInstances: ").append(toIndentedString(numberOfInstances)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

