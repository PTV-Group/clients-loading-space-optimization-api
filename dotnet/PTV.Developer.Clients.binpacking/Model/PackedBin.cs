/*
 * Loading Optimization
 *
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.binpacking.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.binpacking.Model
{
    /// <summary>
    /// Describes a bin packed with items. If Bin.numberOfInstances is greater than one, multiple packed bins with the same PackedBin.binId might be part of a response. 
    /// </summary>
    [DataContract(Name = "PackedBin")]
    public partial class PackedBin : IEquatable<PackedBin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackedBin" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PackedBin() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackedBin" /> class.
        /// </summary>
        /// <param name="binId">ID of the bin. (required).</param>
        /// <param name="packedItems">List of items that were packed into this bin. (required).</param>
        /// <param name="totalItemsVolume">Accumulated volume of the items packed into the bin in [cm³]. This is the raw sum and does not try to capture wasted volume (e.g. gaps). (required).</param>
        /// <param name="totalItemsWeight">Accumulated weight of items packed into this bin in [g]. (required).</param>
        /// <param name="usedWeightCapacity">Percent of maximumWeightCapacity and the accumulated weight of the items packed into this bin (totalItemsWeight). Not returned if maximumWeightCapacity was not specified. .</param>
        /// <param name="usedVolumeCapacity">Percent of maximumVolumeCapacity and the accumulated volume of the items packed into this bin (totalItemsVolume).  (required).</param>
        /// <param name="loadingMeters">Item extent along the z-axis (length) from the back wall of the bin in [m].  (required).</param>
        public PackedBin(string binId = default(string), List<PackedItem> packedItems = default(List<PackedItem>), int totalItemsVolume = default(int), int totalItemsWeight = default(int), double usedWeightCapacity = default(double), double usedVolumeCapacity = default(double), double loadingMeters = default(double))
        {
            // to ensure "binId" is required (not null)
            this.BinId = binId ?? throw new ArgumentNullException("binId is a required property for PackedBin and cannot be null");
            // to ensure "packedItems" is required (not null)
            this.PackedItems = packedItems ?? throw new ArgumentNullException("packedItems is a required property for PackedBin and cannot be null");
            this.TotalItemsVolume = totalItemsVolume;
            this.TotalItemsWeight = totalItemsWeight;
            this.UsedVolumeCapacity = usedVolumeCapacity;
            this.LoadingMeters = loadingMeters;
            this.UsedWeightCapacity = usedWeightCapacity;
        }

        /// <summary>
        /// ID of the bin.
        /// </summary>
        /// <value>ID of the bin.</value>
        [DataMember(Name = "binId", IsRequired = true, EmitDefaultValue = false)]
        public string BinId { get; set; }

        /// <summary>
        /// List of items that were packed into this bin.
        /// </summary>
        /// <value>List of items that were packed into this bin.</value>
        [DataMember(Name = "packedItems", IsRequired = true, EmitDefaultValue = false)]
        public List<PackedItem> PackedItems { get; set; }

        /// <summary>
        /// Accumulated volume of the items packed into the bin in [cm³]. This is the raw sum and does not try to capture wasted volume (e.g. gaps).
        /// </summary>
        /// <value>Accumulated volume of the items packed into the bin in [cm³]. This is the raw sum and does not try to capture wasted volume (e.g. gaps).</value>
        [DataMember(Name = "totalItemsVolume", IsRequired = true, EmitDefaultValue = false)]
        public int TotalItemsVolume { get; set; }

        /// <summary>
        /// Accumulated weight of items packed into this bin in [g].
        /// </summary>
        /// <value>Accumulated weight of items packed into this bin in [g].</value>
        [DataMember(Name = "totalItemsWeight", IsRequired = true, EmitDefaultValue = false)]
        public int TotalItemsWeight { get; set; }

        /// <summary>
        /// Percent of maximumWeightCapacity and the accumulated weight of the items packed into this bin (totalItemsWeight). Not returned if maximumWeightCapacity was not specified. 
        /// </summary>
        /// <value>Percent of maximumWeightCapacity and the accumulated weight of the items packed into this bin (totalItemsWeight). Not returned if maximumWeightCapacity was not specified. </value>
        [DataMember(Name = "usedWeightCapacity", EmitDefaultValue = false)]
        public double UsedWeightCapacity { get; set; }

        /// <summary>
        /// Percent of maximumVolumeCapacity and the accumulated volume of the items packed into this bin (totalItemsVolume). 
        /// </summary>
        /// <value>Percent of maximumVolumeCapacity and the accumulated volume of the items packed into this bin (totalItemsVolume). </value>
        [DataMember(Name = "usedVolumeCapacity", IsRequired = true, EmitDefaultValue = false)]
        public double UsedVolumeCapacity { get; set; }

        /// <summary>
        /// Item extent along the z-axis (length) from the back wall of the bin in [m]. 
        /// </summary>
        /// <value>Item extent along the z-axis (length) from the back wall of the bin in [m]. </value>
        [DataMember(Name = "loadingMeters", IsRequired = true, EmitDefaultValue = false)]
        public double LoadingMeters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackedBin {\n");
            sb.Append("  BinId: ").Append(BinId).Append("\n");
            sb.Append("  PackedItems: ").Append(PackedItems).Append("\n");
            sb.Append("  TotalItemsVolume: ").Append(TotalItemsVolume).Append("\n");
            sb.Append("  TotalItemsWeight: ").Append(TotalItemsWeight).Append("\n");
            sb.Append("  UsedWeightCapacity: ").Append(UsedWeightCapacity).Append("\n");
            sb.Append("  UsedVolumeCapacity: ").Append(UsedVolumeCapacity).Append("\n");
            sb.Append("  LoadingMeters: ").Append(LoadingMeters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PackedBin);
        }

        /// <summary>
        /// Returns true if PackedBin instances are equal
        /// </summary>
        /// <param name="input">Instance of PackedBin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackedBin input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BinId == input.BinId ||
                    (this.BinId != null &&
                    this.BinId.Equals(input.BinId))
                ) && 
                (
                    this.PackedItems == input.PackedItems ||
                    this.PackedItems != null &&
                    input.PackedItems != null &&
                    this.PackedItems.SequenceEqual(input.PackedItems)
                ) && 
                (
                    this.TotalItemsVolume == input.TotalItemsVolume ||
                    this.TotalItemsVolume.Equals(input.TotalItemsVolume)
                ) && 
                (
                    this.TotalItemsWeight == input.TotalItemsWeight ||
                    this.TotalItemsWeight.Equals(input.TotalItemsWeight)
                ) && 
                (
                    this.UsedWeightCapacity == input.UsedWeightCapacity ||
                    this.UsedWeightCapacity.Equals(input.UsedWeightCapacity)
                ) && 
                (
                    this.UsedVolumeCapacity == input.UsedVolumeCapacity ||
                    this.UsedVolumeCapacity.Equals(input.UsedVolumeCapacity)
                ) && 
                (
                    this.LoadingMeters == input.LoadingMeters ||
                    this.LoadingMeters.Equals(input.LoadingMeters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BinId != null)
                    hashCode = hashCode * 59 + this.BinId.GetHashCode();
                if (this.PackedItems != null)
                    hashCode = hashCode * 59 + this.PackedItems.GetHashCode();
                hashCode = hashCode * 59 + this.TotalItemsVolume.GetHashCode();
                hashCode = hashCode * 59 + this.TotalItemsWeight.GetHashCode();
                hashCode = hashCode * 59 + this.UsedWeightCapacity.GetHashCode();
                hashCode = hashCode * 59 + this.UsedVolumeCapacity.GetHashCode();
                hashCode = hashCode * 59 + this.LoadingMeters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TotalItemsVolume (int) minimum
            if(this.TotalItemsVolume < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalItemsVolume, must be a value greater than or equal to 0.", new [] { "TotalItemsVolume" });
            }

            // TotalItemsWeight (int) minimum
            if(this.TotalItemsWeight < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalItemsWeight, must be a value greater than or equal to 0.", new [] { "TotalItemsWeight" });
            }

            // UsedWeightCapacity (double) maximum
            if(this.UsedWeightCapacity > (double)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UsedWeightCapacity, must be a value less than or equal to 100.", new [] { "UsedWeightCapacity" });
            }

            // UsedWeightCapacity (double) minimum
            if(this.UsedWeightCapacity < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UsedWeightCapacity, must be a value greater than or equal to 0.", new [] { "UsedWeightCapacity" });
            }

            // UsedVolumeCapacity (double) maximum
            if(this.UsedVolumeCapacity > (double)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UsedVolumeCapacity, must be a value less than or equal to 100.", new [] { "UsedVolumeCapacity" });
            }

            // UsedVolumeCapacity (double) minimum
            if(this.UsedVolumeCapacity < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UsedVolumeCapacity, must be a value greater than or equal to 0.", new [] { "UsedVolumeCapacity" });
            }

            // LoadingMeters (double) minimum
            if(this.LoadingMeters < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoadingMeters, must be a value greater than or equal to 0.", new [] { "LoadingMeters" });
            }

            yield break;
        }
    }

}
