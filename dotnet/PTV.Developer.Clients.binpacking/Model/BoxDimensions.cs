/*
 * Loading Optimization
 *
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.binpacking.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.binpacking.Model
{
    /// <summary>
    /// Size of an item or bin.
    /// </summary>
    [DataContract(Name = "BoxDimensions")]
    public partial class BoxDimensions : IEquatable<BoxDimensions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxDimensions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BoxDimensions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxDimensions" /> class.
        /// </summary>
        /// <param name="x">Extent along x-axis (width) in [cm]. (required).</param>
        /// <param name="y">Extent along y-axis (height) in [cm]. (required).</param>
        /// <param name="z">Extent along z-axis (length) in [cm]. (required).</param>
        public BoxDimensions(int x = default(int), int y = default(int), int z = default(int))
        {
            this.X = x;
            this.Y = y;
            this.Z = z;
        }

        /// <summary>
        /// Extent along x-axis (width) in [cm].
        /// </summary>
        /// <value>Extent along x-axis (width) in [cm].</value>
        [DataMember(Name = "x", IsRequired = true, EmitDefaultValue = true)]
        public int X { get; set; }

        /// <summary>
        /// Extent along y-axis (height) in [cm].
        /// </summary>
        /// <value>Extent along y-axis (height) in [cm].</value>
        [DataMember(Name = "y", IsRequired = true, EmitDefaultValue = true)]
        public int Y { get; set; }

        /// <summary>
        /// Extent along z-axis (length) in [cm].
        /// </summary>
        /// <value>Extent along z-axis (length) in [cm].</value>
        [DataMember(Name = "z", IsRequired = true, EmitDefaultValue = true)]
        public int Z { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BoxDimensions {\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Z: ").Append(Z).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoxDimensions);
        }

        /// <summary>
        /// Returns true if BoxDimensions instances are equal
        /// </summary>
        /// <param name="input">Instance of BoxDimensions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoxDimensions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.X == input.X ||
                    this.X.Equals(input.X)
                ) && 
                (
                    this.Y == input.Y ||
                    this.Y.Equals(input.Y)
                ) && 
                (
                    this.Z == input.Z ||
                    this.Z.Equals(input.Z)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.X.GetHashCode();
                hashCode = (hashCode * 59) + this.Y.GetHashCode();
                hashCode = (hashCode * 59) + this.Z.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // X (int) minimum
            if (this.X < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for X, must be a value greater than or equal to 1.", new [] { "X" });
            }

            // Y (int) minimum
            if (this.Y < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Y, must be a value greater than or equal to 1.", new [] { "Y" });
            }

            // Z (int) minimum
            if (this.Z < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Z, must be a value greater than or equal to 1.", new [] { "Z" });
            }

            yield break;
        }
    }

}
