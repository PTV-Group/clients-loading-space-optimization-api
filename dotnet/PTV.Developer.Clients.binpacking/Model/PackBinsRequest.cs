/*
 * Loading Optimization
 *
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.binpacking.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.binpacking.Model
{
    /// <summary>
    /// PackBinsRequest
    /// </summary>
    [DataContract(Name = "PackBinsRequest")]
    public partial class PackBinsRequest : IEquatable<PackBinsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackBinsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PackBinsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackBinsRequest" /> class.
        /// </summary>
        /// <param name="items">Describes a list of cuboid items that have to be packed into a bin. If there are many identical items that do not have to be differentiated by individual Item.id you should use the Item.numberOfInstances field. This provides better performance and packing than specifying each item on its own when this is not needed. Please note that along each axis the dimension should not exceed 5,000 cm and the sum of each dimension (i.e. x+y+z) should be greater than 50 cm.  (required).</param>
        /// <param name="bins">Describes a list of cuboid bins into which items can be packed. Please note that along each axis the dimension should not exceed 5,750 cm and the maximum volume of a bin is 425,385,000 cm³.  (required).</param>
        /// <param name="options">options.</param>
        public PackBinsRequest(List<Item> items = default(List<Item>), List<Bin> bins = default(List<Bin>), BinPackingOptions options = default(BinPackingOptions))
        {
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for PackBinsRequest and cannot be null");
            }
            this.Items = items;
            // to ensure "bins" is required (not null)
            if (bins == null)
            {
                throw new ArgumentNullException("bins is a required property for PackBinsRequest and cannot be null");
            }
            this.Bins = bins;
            this.Options = options;
        }

        /// <summary>
        /// Describes a list of cuboid items that have to be packed into a bin. If there are many identical items that do not have to be differentiated by individual Item.id you should use the Item.numberOfInstances field. This provides better performance and packing than specifying each item on its own when this is not needed. Please note that along each axis the dimension should not exceed 5,000 cm and the sum of each dimension (i.e. x+y+z) should be greater than 50 cm. 
        /// </summary>
        /// <value>Describes a list of cuboid items that have to be packed into a bin. If there are many identical items that do not have to be differentiated by individual Item.id you should use the Item.numberOfInstances field. This provides better performance and packing than specifying each item on its own when this is not needed. Please note that along each axis the dimension should not exceed 5,000 cm and the sum of each dimension (i.e. x+y+z) should be greater than 50 cm. </value>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<Item> Items { get; set; }

        /// <summary>
        /// Describes a list of cuboid bins into which items can be packed. Please note that along each axis the dimension should not exceed 5,750 cm and the maximum volume of a bin is 425,385,000 cm³. 
        /// </summary>
        /// <value>Describes a list of cuboid bins into which items can be packed. Please note that along each axis the dimension should not exceed 5,750 cm and the maximum volume of a bin is 425,385,000 cm³. </value>
        [DataMember(Name = "bins", IsRequired = true, EmitDefaultValue = true)]
        public List<Bin> Bins { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public BinPackingOptions Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackBinsRequest {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Bins: ").Append(Bins).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PackBinsRequest);
        }

        /// <summary>
        /// Returns true if PackBinsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PackBinsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackBinsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.Bins == input.Bins ||
                    this.Bins != null &&
                    input.Bins != null &&
                    this.Bins.SequenceEqual(input.Bins)
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                if (this.Bins != null)
                {
                    hashCode = (hashCode * 59) + this.Bins.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
