/*
 * Loading Optimization
 *
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.binpacking.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.binpacking.Model
{
    /// <summary>
    /// Describes a number of instances of an item that could not be packed into a bin. 
    /// </summary>
    [DataContract(Name = "ItemNotPacked")]
    public partial class ItemNotPacked : IEquatable<ItemNotPacked>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemNotPacked" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemNotPacked() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemNotPacked" /> class.
        /// </summary>
        /// <param name="id">The ID of the item. (required).</param>
        /// <param name="numberOfInstances">Number of instances of the item that have not been packed. (required).</param>
        public ItemNotPacked(string id = default(string), int numberOfInstances = default(int))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for ItemNotPacked and cannot be null");
            this.NumberOfInstances = numberOfInstances;
        }

        /// <summary>
        /// The ID of the item.
        /// </summary>
        /// <value>The ID of the item.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Number of instances of the item that have not been packed.
        /// </summary>
        /// <value>Number of instances of the item that have not been packed.</value>
        [DataMember(Name = "numberOfInstances", IsRequired = true, EmitDefaultValue = false)]
        public int NumberOfInstances { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemNotPacked {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NumberOfInstances: ").Append(NumberOfInstances).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemNotPacked);
        }

        /// <summary>
        /// Returns true if ItemNotPacked instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemNotPacked to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemNotPacked input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.NumberOfInstances == input.NumberOfInstances ||
                    this.NumberOfInstances.Equals(input.NumberOfInstances)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.NumberOfInstances.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumberOfInstances (int) maximum
            if(this.NumberOfInstances > (int)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfInstances, must be a value less than or equal to 10000.", new [] { "NumberOfInstances" });
            }

            // NumberOfInstances (int) minimum
            if(this.NumberOfInstances < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfInstances, must be a value greater than or equal to 1.", new [] { "NumberOfInstances" });
            }

            yield break;
        }
    }

}
