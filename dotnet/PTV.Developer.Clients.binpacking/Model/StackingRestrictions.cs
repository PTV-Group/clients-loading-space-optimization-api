/*
 * Loading Optimization
 *
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.binpacking.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.binpacking.Model
{
    /// <summary>
    /// Define the stacking restriction for one item. Specifies which items are allowed or prohibited to be stacked on this item. 
    /// </summary>
    [DataContract(Name = "StackingRestrictions")]
    public partial class StackingRestrictions : IEquatable<StackingRestrictions>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RestrictionType
        /// </summary>
        [DataMember(Name = "restrictionType", EmitDefaultValue = false)]
        public StackingRestrictionType? RestrictionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StackingRestrictions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StackingRestrictions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StackingRestrictions" /> class.
        /// </summary>
        /// <param name="itemId">ID of the item. (required).</param>
        /// <param name="restrictionType">restrictionType.</param>
        /// <param name="itemIds">Specifies the list of Item.id to which the restrictionType applies..</param>
        public StackingRestrictions(string itemId = default(string), StackingRestrictionType? restrictionType = default(StackingRestrictionType?), List<string> itemIds = default(List<string>))
        {
            // to ensure "itemId" is required (not null)
            if (itemId == null)
            {
                throw new ArgumentNullException("itemId is a required property for StackingRestrictions and cannot be null");
            }
            this.ItemId = itemId;
            this.RestrictionType = restrictionType;
            this.ItemIds = itemIds;
        }

        /// <summary>
        /// ID of the item.
        /// </summary>
        /// <value>ID of the item.</value>
        [DataMember(Name = "itemId", IsRequired = true, EmitDefaultValue = true)]
        public string ItemId { get; set; }

        /// <summary>
        /// Specifies the list of Item.id to which the restrictionType applies.
        /// </summary>
        /// <value>Specifies the list of Item.id to which the restrictionType applies.</value>
        [DataMember(Name = "itemIds", EmitDefaultValue = false)]
        public List<string> ItemIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StackingRestrictions {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  RestrictionType: ").Append(RestrictionType).Append("\n");
            sb.Append("  ItemIds: ").Append(ItemIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StackingRestrictions);
        }

        /// <summary>
        /// Returns true if StackingRestrictions instances are equal
        /// </summary>
        /// <param name="input">Instance of StackingRestrictions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StackingRestrictions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.RestrictionType == input.RestrictionType ||
                    this.RestrictionType.Equals(input.RestrictionType)
                ) && 
                (
                    this.ItemIds == input.ItemIds ||
                    this.ItemIds != null &&
                    input.ItemIds != null &&
                    this.ItemIds.SequenceEqual(input.ItemIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemId != null)
                {
                    hashCode = (hashCode * 59) + this.ItemId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RestrictionType.GetHashCode();
                if (this.ItemIds != null)
                {
                    hashCode = (hashCode * 59) + this.ItemIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
